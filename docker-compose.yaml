version: "3.7"

services:
  npm:
    container_name: npm
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - 4343:80 # http
      - 4344:81 # for web interface
      - 4345:443 # https
    volumes:
      - ${CONTAINER_DIR}/npm/data:/data
      - ${CONTAINER_DIR}/npm/letsencrypt:/etc/letsencrypt

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Singapore
    group_add:
      - "104"
    devices:
      #- /dev/dri:/dev/dri
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    volumes:
      - ${CONTAINER_DIR}/media_server/jellyfin/config:/config
      - ${SENTINEL_DIR}/media_server/media/tvshows:/data/tvshows
      - ${SENTINEL_DIR}/media_server/media/movies:/data/movies
    ports:
      - 8096:8096
        #- 8920:8920 #optional
        #- 7359:7359/udp #optional
        #- 1900:1900/udp #optional
    restart: unless-stopped

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Singapore
    volumes:
      - ${CONTAINER_DIR}/media_server/sonarr/config:/config
      - ${SENTINEL_DIR}/media_server/media/tvshows:/tv #optional
      - ${SENTINEL_DIR}/media_server/downloads/complete:/downloads #optional
    ports:
      - 8989:8989
    restart: unless-stopped

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Singapore
    volumes:
      - ${CONTAINER_DIR}/media_server/radarr/config:/config
      - ${SENTINEL_DIR}/media_server/media/movies:/movies #optional
      - ${SENTINEL_DIR}/media_server/downloads/complete:/downloads #optional
    ports:
      - 7878:7878
    restart: unless-stopped

  sabnzbd:
    container_name: sabnzbd
    image: linuxserver/sabnzbd:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Singapore
    volumes:
      - ${CONTAINER_DIR}/media_server/sabnzbd/config:/config
      - ${SENTINEL_DIR}/media_server/downloads/complete:/downloads #optional
      - ${SENTINEL_DIR}/media_server/downloads/incomplete:/incomplete-downloads #optional
    ports:
      - 6767:8080
    dns:
      - "192.168.1.1"
    restart: unless-stopped

  jellyseerr:
    container_name: jellyseerr
    image: fallenbagel/jellyseerr:latest
    environment:
         - LOG_LEVEL=debug
         - TZ=Asia/Singapore
    ports:
         - 5055:5055
    volumes:
         - ${CONTAINER_DIR}/media_server/jellyseerr/config:/app/config
    restart: unless-stopped

  mqtt:
    container_name: mqtt
    image: eclipse-mosquitto
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - ${CONTAINER_DIR}/smart_home/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ${CONTAINER_DIR}/smart_home/mosquitto/data:/mosquitto/data
      - ${CONTAINER_DIR}/smart_home/mosquitto/log:/mosquitto/log
    restart: unless-stopped

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    ports:
      - 8081:8080
    devices:
      - /dev/serial/by-id/usb-ITead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_f8b77f547945ed11ad45ca8f0a86e0b4-if00-port0:/dev/ttyUSB0
    volumes:
      - ${CONTAINER_DIR}/smart_home/zigbee2mqtt/data:/app/data
      - /run/udev:/run/udev:ro
    environment:
      - TZ=Asia/Singapore
    restart: unless-stopped
    depends_on:
      - mqtt
      - homeassistant

  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    network_mode: "host"
    volumes:
      - ${CONTAINER_DIR}/smart_home/homeassistant:/config
    environment:
      - TZ=Asia/Singapore
    privileged: true
    restart: unless-stopped


  nextcloud-db:
    container_name: nextcloud-db
    image: mariadb:10.6
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - ${CONTAINER_DIR}/nextcloud-db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    restart: unless-stopped

  nextcloud-app:
    container_name: nextcloud
    image: nextcloud
    ports:
      - 8080:80
    links:
      - nextcloud-db
    volumes:
      - ${SENTINEL_DIR}/nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=nextcloud-db
    restart: unless-stopped

  homepage:
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:latest
    ports:
      - 3000:3000
    volumes:
      - ${CONTAINER_DIR}/homepage/config:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations
      - /sentinel:/disk
    restart: unless-stopped

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
    ports:
      - 1111:8080 # webapp
      - 1112:8086 # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ${CONTAINER_DIR}/scrutiny/config:/opt/scrutiny/config
      - ${CONTAINER_DIR}/scrutiny/influxdb:/opt/scrutiny/influxdb
    environment:
      - DEBUG=true
      - SCRUTINY_LOG_FILE=/tmp/web.log
      - COLLECTOR_LOG_FILE=/tmp/collector.log
    devices:
      - /dev/sda
      - /dev/sdb
      - /dev/sdc
      - /dev/sdd
      - /dev/sde

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    command: [ "start.sh", "immich" ]
    volumes:
      - ${SENTINEL_DIR}/file_server/immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - 2283:3001
    depends_on:
      - immich-redis
      - immich-database
    restart: always

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:release
    # extends:
    #   file: hwaccel.yml
    #   service: hwaccel
    command: [ "start.sh", "microservices" ]
    volumes:
      - ${SENTINEL_DIR}/file_server/immich/upload:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - immich-redis
      - immich-database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - ${SENTINEL_DIR}/file_server/immich/model-cache:/cache
    env_file:
      - .env
    restart: always

  immich-redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:b6124ab2e45cc332e16398022a411d7e37181f21ff7874835e0180f56a09e82a
    env_file:
      - .env
    restart: always

  immich-database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.1.11@sha256:0335a1a22f8c5dd1b697f14f079934f5152eaaa216c09b61e293be285491f8ee
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - ${SENTINEL_DIR}/file_server/immich/database:/var/lib/postgresql/data
    env_file:
      - .env
    restart: always

  paperless-broker:
    container_name: paperless-broker
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - ${SENTINEL_DIR}/file_server/paperless/redis:/data

  paperless-db:
    container_name: paperless-db
    image: docker.io/library/postgres:15
    restart: unless-stopped
    volumes:
      - ${SENTINEL_DIR}/file_server/paperless/database:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${PAPERLESS_DB_NAME}
      POSTGRES_USER: ${PAPERLESS_DB_USER}
      POSTGRES_PASSWORD: ${PAPERLESS_DB_PASSWORD}

  paperless-webserver:
    container_name: paperless-server
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - paperless-db
      - paperless-broker
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ${SENTINEL_DIR}/file_server/paperless/data:/usr/src/paperless/data
      - ${SENTINEL_DIR}/file_server/paperless/media:/usr/src/paperless/media
      - ${CONTAINER_DIR}/file_server/paperless/export:/usr/src/paperless/export
      - ${CONTAINER_DIR}/file_server/paperless/consume:/usr/src/paperless/consume
    env_file:
      - .env
    environment:
      PAPERLESS_REDIS: redis://paperless-broker:6379
      PAPERLESS_DBHOST: paperless-db
    
  authentik-db:
    container_name: authentik-db
    image: docker.io/library/postgres:12-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${CONTAINER_DIR}/authentik/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    env_file:
      - .env
    restart: unless-stopped

  authentik-redis:
    container_name: authentik-redis
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${CONTAINER_DIR}/authentik/redis:/data
    restart: unless-stopped

  authentik-server:
    container_name: authentik-server
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.5}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ${CONTAINER_DIR}/authentik/media:/media
      - ${CONTAINER_DIR}/authentik/custom-templates:/templates
    env_file:
      - .env
    ports:
      - 9000:9000
      - 9443:9443
    depends_on:
      - authentik-db
      - authentik-redis
    restart: unless-stopped

  authentik-worker:
    container_name: authentik-worker
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.5}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONTAINER_DIR}/authentik/media:/media
      - ${CONTAINER_DIR}/authentik/certs:/certs
      - ${CONTAINER_DIR}/authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - authentik-db
      - authentik-redis
    restart: unless-stopped

  bookstack:
    container_name: bookstack
    image: lscr.io/linuxserver/bookstack
    environment:
      - PUID=1000
      - PGID=1000
      - APP_URL=http://bookstack.yaparyhome.casa
      - DB_HOST=bookstack_db
      - DB_PORT=3306
      - DB_USER=${BOOKSTACK_DB_USER}
      - DB_PASS=${BOOKSTACK_DB_PASS}
      - DB_DATABASE=${BOOKSTACK_DB_NAME}
    volumes:
      - ${CONTAINER_DIR}/bookstack/app:/config
    ports:
      - 6875:80
    restart: unless-stopped
    depends_on:
      - bookstack_db

  bookstack_db:
    container_name: bookstack_db
    image: lscr.io/linuxserver/mariadb
    environment:
      - PUID=1000
      - PGID=1000
      - MYSQL_ROOT_PASSWORD=${BOOKSTACK_DB_PASS}
      - TZ=Asia/Singapore
      - MYSQL_DATABASE=${BOOKSTACK_DB_NAME}
      - MYSQL_USER=${BOOKSTACK_DB_USER}
      - MYSQL_PASSWORD=${BOOKSTACK_DB_PASS}
    volumes:
      - ${CONTAINER_DIR}/bookstack/db:/config
    restart: unless-stopped

  firefly3-app:
    container_name: firefly3-app
    image: fireflyiii/core:latest
    hostname: firefly3-app
    volumes:
      - ${CONTAINER_DIR}/firefly3/upload:/var/www/html/storage/upload
    env_file:
      - .firefly3-app.env
    ports:
      - 1100:8080
    depends_on:
      - firefly3-db
    restart: unless-stopped

  firefly3-db:
    container_name: firefly3-db
    image: mysql
    hostname: firefly3-db
    env_file:
      - .firefly3-db.env
    volumes:
      - ${CONTAINER_DIR}/firefly3/db:/var/lib/mysql
    restart: unless-stopped

  firefly3-importer:
    container_name: firefly3-importer
    image: fireflyiii/data-importer:latest
    hostname: firefly3-importer
    ports:
      - 1110:8080
    depends_on:
      - firefly3-app
    env_file:
      - .firefly3-importer.env
    restart: unless-stopped

  firefly3-cron:
    #
    # To make this work, set STATIC_CRON_TOKEN in your .env file or as an environment variable and replace REPLACEME below
    # The STATIC_CRON_TOKEN must be *exactly* 32 characters long
    #
    container_name: firefly3-cron
    image: alpine
    restart: always
    command: sh -c "echo \"0 3 * * * wget -qO- http://firefly3-app:8080/api/v1/cron/6a4b0f890e74b4217e4bd1d44d78ed23\" | crontab - && crond -f -L /dev/stdout"

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
